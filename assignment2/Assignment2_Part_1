{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "accelerator": "GPU",
    "colab": {
      "name": "Untitled",
      "provenance": [],
      "collapsed_sections": []
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "metadata": {
        "id": "0CDrLhEkkJaG"
      },
      "source": [
        "# Imported all essential libraries\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "from keras.datasets import mnist\n",
        "from keras_preprocessing import image\n",
        "import random"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ycwudKs0kY7Y",
        "outputId": "3ead572b-7419-4323-c9d0-c5e519f92f77"
      },
      "source": [
        "# Loaded the mnist dataset from the keras API\n",
        "(x_train,y_train),(x_test,y_test) = mnist.load_data()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/mnist.npz\n",
            "11493376/11490434 [==============================] - 0s 0us/step\n",
            "(60000, 28, 28)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "IG_Gx4xqk9lB"
      },
      "source": [
        "# Created new array for the rotated dataset\n",
        "x_train_rotated = []\n",
        "y_train_rotated = []\n",
        "x_test_rotated = []\n",
        "y_test_rotated = []"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "XiDrTb5QqRVo"
      },
      "source": [
        "# Rotating the X_train Dataset\n",
        "for i in range(len(x_train)) : \n",
        "  img = image.array_to_img(np.reshape(x_train[i],(28,28,1)))\n",
        "  r = int(random.randrange(-45,45))\n",
        "  img = img.rotate(r)\n",
        "  x_train_rotated.append(image.img_to_array(img))\n",
        "  y_train_rotated.append(r)\n",
        "  x_train_rotated.append(np.reshape(x_train[i],(28,28,1)))\n",
        "  y_train_rotated.append(0)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "VA1-hpB_rFL-"
      },
      "source": [
        "#Rotating the X_test dataset\n",
        "for i in range(len(x_test)) : \n",
        "  img = image.array_to_img(np.reshape(x_test[i],(28,28,1)))\n",
        "  r = int(random.randrange(-45,45))\n",
        "  img = img.rotate(r)\n",
        "  x_test_rotated.append(image.img_to_array(img))\n",
        "  y_test_rotated.append(r)\n",
        "  x_test_rotated.append(np.reshape(x_test[i],(28,28,1)))\n",
        "  y_test_rotated.append(0)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "JBJ7xe2orVX_"
      },
      "source": [
        "# Converted the rotated dataset into Numpy array for model input and evaluation \n",
        "x_train_rotated = np.array(x_train_rotated)\n",
        "y_train_rotated = np.array(y_train_rotated)\n",
        "x_test_rotated = np.array(x_test_rotated)\n",
        "y_test_rotated = np.array(y_test_rotated)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "13vddjZErYaQ",
        "outputId": "d3183c16-bcd8-4469-e683-20f118c42684"
      },
      "source": [
        "# Created the convolution neural network model\n",
        "from keras.layers import Input, Dense, BatchNormalization, Conv2D, Activation, Flatten, AveragePooling2D, Dropout\n",
        "from keras.models import Model\n",
        "\n",
        "input_X = Input(shape=(28,28,1))\n",
        "\n",
        "x1 = Conv2D(8, (3,3), padding='same')(input_X)\n",
        "x2 = BatchNormalization()(x1)\n",
        "x3 = Activation('relu')(x2)\n",
        "\n",
        "x4 = AveragePooling2D(pool_size=2, strides=(2,2))(x3)\n",
        "\n",
        "x5 = Conv2D(16, (3,3), padding='same')(x4)\n",
        "x6 = BatchNormalization()(x5)\n",
        "x7 = Activation('relu')(x6)\n",
        "\n",
        "x8 = AveragePooling2D(pool_size=2, strides=(2,2))(x7)\n",
        "\n",
        "x9 = Conv2D(32, (3,3), padding='same')(x8)\n",
        "x10 = BatchNormalization()(x9)\n",
        "x11 = Activation('relu')(x10)\n",
        "\n",
        "x12 = Conv2D(32, (3,3), padding='same')(x11)\n",
        "x13 = BatchNormalization()(x12)\n",
        "x14 = Activation('relu')(x13)\n",
        "\n",
        "x15 = Flatten()(x14)\n",
        "x16 = Dropout(0.2)(x15)\n",
        "x17 = Dense(64, activation='relu')(x16)\n",
        "x18 = Dense(1)(x17)\n",
        "\n",
        "model = Model(inputs = input_X, outputs = x18)\n",
        "model.summary()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Model: \"functional_1\"\n",
            "_________________________________________________________________\n",
            "Layer (type)                 Output Shape              Param #   \n",
            "=================================================================\n",
            "input_1 (InputLayer)         [(None, 28, 28, 1)]       0         \n",
            "_________________________________________________________________\n",
            "conv2d (Conv2D)              (None, 28, 28, 8)         80        \n",
            "_________________________________________________________________\n",
            "batch_normalization (BatchNo (None, 28, 28, 8)         32        \n",
            "_________________________________________________________________\n",
            "activation (Activation)      (None, 28, 28, 8)         0         \n",
            "_________________________________________________________________\n",
            "average_pooling2d (AveragePo (None, 14, 14, 8)         0         \n",
            "_________________________________________________________________\n",
            "conv2d_1 (Conv2D)            (None, 14, 14, 16)        1168      \n",
            "_________________________________________________________________\n",
            "batch_normalization_1 (Batch (None, 14, 14, 16)        64        \n",
            "_________________________________________________________________\n",
            "activation_1 (Activation)    (None, 14, 14, 16)        0         \n",
            "_________________________________________________________________\n",
            "average_pooling2d_1 (Average (None, 7, 7, 16)          0         \n",
            "_________________________________________________________________\n",
            "conv2d_2 (Conv2D)            (None, 7, 7, 32)          4640      \n",
            "_________________________________________________________________\n",
            "batch_normalization_2 (Batch (None, 7, 7, 32)          128       \n",
            "_________________________________________________________________\n",
            "activation_2 (Activation)    (None, 7, 7, 32)          0         \n",
            "_________________________________________________________________\n",
            "conv2d_3 (Conv2D)            (None, 7, 7, 32)          9248      \n",
            "_________________________________________________________________\n",
            "batch_normalization_3 (Batch (None, 7, 7, 32)          128       \n",
            "_________________________________________________________________\n",
            "activation_3 (Activation)    (None, 7, 7, 32)          0         \n",
            "_________________________________________________________________\n",
            "flatten (Flatten)            (None, 1568)              0         \n",
            "_________________________________________________________________\n",
            "dropout (Dropout)            (None, 1568)              0         \n",
            "_________________________________________________________________\n",
            "dense (Dense)                (None, 64)                100416    \n",
            "_________________________________________________________________\n",
            "dense_1 (Dense)              (None, 1)                 65        \n",
            "=================================================================\n",
            "Total params: 115,969\n",
            "Trainable params: 115,793\n",
            "Non-trainable params: 176\n",
            "_________________________________________________________________\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "MK1BYnoYrb8D"
      },
      "source": [
        "# Defined the optimizers\n",
        "from keras import optimizers\n",
        "sgd = optimizers.SGD(lr=0.001, momentum=0.0, decay=0.0, nesterov=False)\n",
        "rmsprop = optimizers.RMSprop(lr=0.001, rho=0.9, epsilon=1e-08, decay=0.0)\n",
        "adagrad = optimizers.Adagrad(lr=0.01, epsilon=1e-08, decay=0.0)\n",
        "adam = optimizers.Adam(lr=0.0001, beta_1=0.9, beta_2=0.999, epsilon=1e-08, decay=0.0)\n",
        "model.compile(loss='mean_squared_error',\n",
        "              optimizer=sgd, \n",
        "              metrics=['mean_squared_error'])"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "aN3wT4m_rg2i",
        "outputId": "02cf7e3c-b9d5-43b1-cd7b-d8f36a7fe667"
      },
      "source": [
        "# Trained the model with 15 epochs\n",
        "from keras.preprocessing.image import ImageDataGenerator\n",
        "train_datagen = ImageDataGenerator(rescale = 1./255,validation_split=0.2)\n",
        "test_datagen = ImageDataGenerator(rescale = 1./255)\n",
        "\n",
        "train_generator = train_datagen.flow(\n",
        "    x_train_rotated,\n",
        "    y_train_rotated,\n",
        "    batch_size = 20\n",
        ")\n",
        "\n",
        "test_generator = test_datagen.flow(\n",
        "    x_test_rotated,\n",
        "    y_test_rotated,\n",
        "    batch_size = 20\n",
        ")\n",
        "history = model.fit_generator(train_generator,\n",
        " validation_data=test_generator,\n",
        " epochs = 15)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "WARNING:tensorflow:From <ipython-input-11-c30ae9dfbe8e>:20: Model.fit_generator (from tensorflow.python.keras.engine.training) is deprecated and will be removed in a future version.\n",
            "Instructions for updating:\n",
            "Please use Model.fit, which supports generators.\n",
            "Epoch 1/5\n",
            "6000/6000 [==============================] - 24s 4ms/step - loss: 62.6454 - mean_squared_error: 62.6454 - val_loss: 38.8218 - val_mean_squared_error: 38.8218\n",
            "Epoch 2/5\n",
            "6000/6000 [==============================] - 24s 4ms/step - loss: 35.9845 - mean_squared_error: 35.9845 - val_loss: 37.3071 - val_mean_squared_error: 37.3071\n",
            "Epoch 3/5\n",
            "6000/6000 [==============================] - 25s 4ms/step - loss: 29.6261 - mean_squared_error: 29.6261 - val_loss: 33.2661 - val_mean_squared_error: 33.2661\n",
            "Epoch 4/5\n",
            "6000/6000 [==============================] - 24s 4ms/step - loss: 25.8917 - mean_squared_error: 25.8917 - val_loss: 38.5053 - val_mean_squared_error: 38.5053\n",
            "Epoch 5/5\n",
            "6000/6000 [==============================] - 24s 4ms/step - loss: 22.6442 - mean_squared_error: 22.6442 - val_loss: 30.6227 - val_mean_squared_error: 30.6227\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "EFZbL1hRrjbx",
        "outputId": "c35367f7-cd8a-4fed-fef8-70b7e4c282e6"
      },
      "source": [
        "# Model Evaluation\n",
        "a = model.evaluate(x_train_rotated/255, y_train_rotated)\n",
        "b = model.evaluate(x_test_rotated/255, y_test_rotated)\n",
        "print(a)\n",
        "print(b)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "3750/3750 [==============================] - 8s 2ms/step - loss: 26.6457 - mean_squared_error: 26.6457\n",
            "625/625 [==============================] - 1s 2ms/step - loss: 30.6227 - mean_squared_error: 30.6227\n",
            "[26.645706176757812, 26.645706176757812]\n",
            "[30.622703552246094, 30.622703552246094]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 296
        },
        "id": "E34pgbChnaY0",
        "outputId": "1a8b8bb3-975e-4a4c-c408-4982008bebab"
      },
      "source": [
        "# Plotted the true and Predicted values\n",
        "import matplotlib.pyplot as plt\n",
        "y_pred = []\n",
        "y_pred = (model.predict(x_test_rotated/255))\n",
        "\n",
        "plt.plot(y_test_rotated, y_pred,'*')\n",
        "plt.xlabel('True angles')\n",
        "plt.ylabel('Predicted angles')\n",
        "plt.legend()\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "No handles with labels found to put in legend.\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "1uTaDlZKv5YB"
      },
      "source": [
        "Worst predictions Some of the worst predictions are as follows (inferred from graph)\n",
        "\n",
        "Prediction for -40 -> predicted value 20\n",
        "\n",
        "Prediction for -35 -> predicted value 10\n",
        "\n",
        "Prediction for -20 -> predicted value 10\n",
        "\n",
        "Prediction for 0 -> predicted value -30\n",
        "\n",
        "Prediction for 0 -> predicted value 10\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "GVJ2QkNWwQvs"
      },
      "source": [
        "One of the reasons for such worst predictions is the failure of the model to fit the complete dataset. This can be improved by tuning the parmeters of the mdoel to fit the model better.\n",
        "Another reason for worst perdicted values is the presence of outliers in the dataset. In this case, even though the model fits the data perfectly, it fails to give accuracte predictions for these outliers."
      ]
    }
  ]
}